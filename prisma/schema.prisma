generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique() @db.VarChar(32)
  username  String     @db.VarChar(32)
  password  String     @db.VarChar(255)
  photo     String?    @db.VarChar(255)
  activated Boolean?   @default(false)
  room_user RoomUser[]
  room      Room[]
}

model RoomUser {
  roomId     Int
  userId     Int
  removed    Boolean    @default(false)
  activated  Boolean    @default(false)
  room       Room       @relation(fields: [roomId], references: [id], onDelete: Cascade, map: "room-user_ibfk_1")
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, map: "room-user_ibfk_2")
  task       Task[]
  comments   Comment[]
  activities Activity[]

  @@id([roomId, userId])
  @@unique([roomId, userId], map: "room-user_roomId_userId_unique")
  @@index([userId], map: "userId")
}

model Room {
  id          Int        @id @default(autoincrement())
  ownerId     Int
  name        String     @db.VarChar(32)
  description String     @db.VarChar(255)
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  owner       User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  tags        Tag[]
  room_user   RoomUser[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  authorId  Int
  roomId    Int
  taskId    Int
  content   String    @db.VarChar(255)
  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt
  task      Task      @relation(fields: [taskId, roomId], references: [id, roomId])
  author    RoomUser  @relation(fields: [roomId, authorId], references: [roomId, userId])

  @@unique([id, roomId, taskId])
}

model Tag {
  id          Int       @id @default(autoincrement())
  roomId      Int
  name        String    @db.VarChar(32)
  mainColor   String    @db.VarChar(7)
  secondColor String    @db.VarChar(7)
  room        Room      @relation(fields: [roomId], references: [id], onDelete: Cascade, map: "tags_ibfk_1")
  task_tag    TagTask[]

  @@unique([id, roomId])
  @@index([roomId], map: "roomId")
}

model Task {
  id          Int        @id @default(autoincrement())
  roomId      Int
  authorId    Int
  tagIds      Int[]      @default([])
  title       String     @db.VarChar(32)
  description String?    @db.VarChar(255)
  status      TaskStatus @default(ready)
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  author      RoomUser   @relation(fields: [roomId, authorId], references: [roomId, userId], onDelete: Cascade, map: "task_ibfk_1")
  comments    Comment[]
  task_tag    TagTask[]

  @@unique([id, roomId])
  @@index([authorId], map: "authorId")
  @@index([roomId], map: "taskRoomId")
}

model TagTask {
  tagId  Int
  taskId Int
  roomId Int
  task   Task @relation(fields: [taskId, roomId], references: [id, roomId], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId, roomId], references: [id, roomId], onDelete: Cascade)

  @@id([tagId, taskId])
  @@unique([tagId, taskId])
  @@index([roomId], map: "tagTaskRoomId")
}

enum TaskStatus {
  done
  in_progress @map("in progress")
  ready
  review
}

model Activity {
  id         Int            @id @default(autoincrement())
  roomId     Int
  sphereId   Int
  actionId   Int
  activistId Int
  createdAt  DateTime?      @default(now()) @db.Timestamptz(0)
  action     ActivityAction @relation(fields: [actionId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  sphere     ActivitySphere @relation(fields: [sphereId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  room_user  RoomUser       @relation(fields: [roomId, activistId], references: [roomId, userId], onDelete: Restrict, onUpdate: Cascade)

  @@index([sphereId], map: "sphereId")
}

model ActivityAction {
  id       Int        @id @default(autoincrement())
  name     String     @unique() @db.VarChar(32)
  Activity Activity[]
}

model ActivitySphere {
  id         Int        @id @default(autoincrement())
  name       String     @unique(map: "name") @db.VarChar(32)
  activities Activity[]
}
